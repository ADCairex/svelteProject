
(function(l, r) { if (!l || l.getElementById('livereloadscript')) return; r = l.createElement('script'); r.async = 1; r.src = '//' + (self.location.host || 'localhost').split(':')[0] + ':35729/livereload.js?snipver=1'; r.id = 'livereloadscript'; l.getElementsByTagName('head')[0].appendChild(r) })(self.document);
var app = (function (internal) {
	'use strict';

	/* src/App.svelte generated by Svelte v3.44.0 */

	const file = "src/App.svelte";

	function create_fragment(ctx) {
		let main;

		const block = {
			c: function create() {
				main = internal.element("main");
				internal.add_location(main, file, 3, 0, 20);
			},
			l: function claim(nodes) {
				throw new Error("options.hydrate only works if the component was compiled with the `hydratable: true` option");
			},
			m: function mount(target, anchor) {
				internal.insert_dev(target, main, anchor);
			},
			p: internal.noop,
			i: internal.noop,
			o: internal.noop,
			d: function destroy(detaching) {
				if (detaching) internal.detach_dev(main);
			}
		};

		internal.dispatch_dev("SvelteRegisterBlock", {
			block,
			id: create_fragment.name,
			type: "component",
			source: "",
			ctx
		});

		return block;
	}

	function instance($$self, $$props) {
		let { $$slots: slots = {}, $$scope } = $$props;
		internal.validate_slots('App', slots, []);
		const writable_props = [];

		Object.keys($$props).forEach(key => {
			if (!~writable_props.indexOf(key) && key.slice(0, 2) !== '$$' && key !== 'slot') console.warn(`<App> was created with unknown prop '${key}'`);
		});

		return [];
	}

	class App extends internal.SvelteComponentDev {
		constructor(options) {
			super(options);
			internal.init(this, options, instance, create_fragment, internal.safe_not_equal, {});

			internal.dispatch_dev("SvelteRegisterComponent", {
				component: this,
				tagName: "App",
				options,
				id: create_fragment.name
			});
		}
	}

	const app = new App({
		target: document.body,
		props: {
		}
	});

	return app;

})(internal);
//# sourceMappingURL=bundle.js.map
